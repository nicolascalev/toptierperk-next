// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  username      String    @unique
  email         String    @unique
  auth0sub      String    @unique
  name          String
  picture       Photo?
  businessId     Int?
  // TODO: evaluate wether users should have multiple adminOf or businesses
  business       Business?  @relation(name: "Employees", fields: [businessId], references: [id])
  adminOfId     Int?
  adminOf       Business?  @relation(name: "Admins", fields: [adminOfId], references: [id])
  canVerify     Boolean   @default(false)
  savedBenefits Benefit[]
  claims        Claim[]
}

model Business {
  id                       Int       @id @default(autoincrement())
  createdAt                DateTime  @default(now())
  name                     String    @unique
  email                    String    @unique
  about                    String?
  logo                     Photo?
  paidMembership           Boolean   @default(false)
  lastPaymentDate          DateTime?
  paypalSubscriptionId     String?   @unique
  employees                User[]    @relation(name: "Employees")
  admins                   User[]    @relation(name: "Admins")
  benefits                 Benefit[] @relation(name: "Suppliers")
  benefitsFrom             Benefit[] @relation(name: "Beneficiaries")
  privateBenefitsAvailable Benefit[] @relation(name: "AvailableFor")
  claims                   Claim[]
  claimAmount              Int       @default(0)
  allowedEmployeeEmails    Json      @default("\"[]\"")
}

model Benefit {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  name            String
  description     Json
  categories      Category[]
  photos          Photo[]
  supplierId      Int
  supplier        Business    @relation(name: "Suppliers", fields: [supplierId], references: [id])
  beneficiaries   Business[]  @relation(name: "Beneficiaries")
  startsAt        DateTime   @default(now())
  finishesAt      DateTime?
  isPrivate       Boolean    @default(false)
  availableFor    Business[]  @relation(name: "AvailableFor")
  isActive        Boolean    @default(true)
  claims          Claim[]
  claimAmount     Int        @default(0)
  savedBy         User[]
  useLimit        Int?
  useLimitPerUser Int?
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String    @unique
  benefits  Benefit[]
}

model Photo {
  id        Int      @id @default(autoincrement())
  url       String
  benefitId Int?
  benefit   Benefit? @relation(fields: [benefitId], references: [id])
  userId    Int?     @unique
  user      User?    @relation(fields: [userId], references: [id])
  businessId Int?     @unique
  business   Business? @relation(fields: [businessId], references: [id])
}

model Claim {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  benefitId  Int
  benefit    Benefit   @relation(fields: [benefitId], references: [id])
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [id])
  businessId  Int       @unique
  business    Business   @relation(fields: [businessId], references: [id])
  approvedAt DateTime?
}
